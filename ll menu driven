#include<iostream>
using namespace std;
struct node{
    int data;
    node* next;
};
node*head=NULL;
void starting(){
int data;
node* newnode=new struct node;
cout<<"enter the data"<<endl;
cin>>data;
newnode->data=data;
newnode->next=NULL;
if(head==NULL){
    head=newnode;
}
else{
    newnode->next=head;
    head=newnode;
}
}
void end(){
    int data;
    cout<<"enter the data"<<endl;
    cin>>data;
    node* newnode=new struct node;
    newnode->data=data;
    newnode->next=NULL;
    if(head==NULL){
        head=newnode;
    }
    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }    temp->next=newnode;
    
}
void before(){
    int data;
    cout<<"enter the data"<<endl;
    cin>>data;
    node* newnode=new struct node;
    newnode->data=data;
    newnode->next=NULL;
    node *temp=head;
    node* q=NULL;
    int n;
    cout<<"enter the position"<<endl;
    cin>>n;
     if (n <= 1 || head == NULL) {
        newnode->next = head;
        head = newnode;
    }
    for(int i=1;i<n;i++){
        if(temp!=NULL){
        q=temp;
        temp=temp->next;
    }}
    newnode->next=temp;
    q->next=newnode;
}
void after(){
     int data;
    cout<<"enter the data"<<endl;
    cin>>data;
    node* newnode=new struct node;
    newnode->data=data;
    newnode->next=NULL;
    node *temp=head;
    node* q=NULL;
    int n;
    cout<<"enter the position"<<endl;
    cin>>n;
     if (n <= 1 || head == NULL) {
        newnode->next = head;
        head = newnode;
    }
    for(int i=1;i<n;i++){
        if(temp!=NULL){
        temp=temp->next;
    }}
    newnode->next=temp->next;
    temp->next=newnode;
}
void deleteEle(){
    int pos;
    node* temp=head;
    node* q=NULL;
    cout<<"enter the position to be deleted"<<endl;
    cin>>pos;
     if (head == NULL) {
        cout << "List is empty." << endl;
    }
    if (pos == 1) {
        head = temp->next;
        delete temp;}
    for(int i=1;i<=pos;i++){
        q=temp;
        temp=temp->next;
    }
    if (temp == NULL) {
            cout << "Position out of range." << endl;}
    q->next=temp->next;
    delete temp;
}
void display() {
    node* temp = head;
    if (temp == NULL) {
        cout << "The list is empty." << endl;
    }
    cout << "List: ";
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}
int main() {
    int choice;
      while (true) {
        cout << "1. Add to start\n"
             << "2. Add to end\n"
             << "3. Add before position\n"
             << "4. Add after position\n"
             << "5. Delete \n"
             << "6. Display \n"
             << "7. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        if (choice == 7) {
            break;
        }
        switch (choice) {
            case 1: starting(); break;
            case 2: end(); break;
            case 3: before(); break;
            case 4: after(); break;
            case 5: deleteEle(); break;
            case 6: display(); break;
            default: cout << "Invalid choice, please try again." << endl; break;
        }}
        return 0;
}
