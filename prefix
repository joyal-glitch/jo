#include <iostream>
using namespace std;

class InfixToPrefix {
private:
    char stack[100];
    int top = -1;

    bool isFull() {
        return top == 99;
    }

    bool isEmpty() {
        return top == -1;
    }

    void push(char c) {
        if (isFull()) {
            cout << "Stack is full" << endl;
        } else {
            stack[++top] = c;
        }
    }

    char pop() {
        if (isEmpty()) {
            cout << "Stack is empty" << endl;
            return '\0';
        } else {
            return stack[top--];
        }
    }

    int precedence(char ch) {
        switch (ch) {
            case '^': return 4;
            case '*': case '/': return 3;
            case '+': case '-': return 2;
            default: return 0;
        }
    }

    void reverse(char infix[], int length) {
        int start = 0;
        int end = length - 1;
        while (start < end) {
            char temp = infix[start];
            infix[start] = infix[end];
            infix[end] = temp;
            start++;
            end--;
        }
    }

    void swapParentheses(char infix[], int length) {
        for (int i = 0; i < length; i++) {
            if (infix[i] == '(') {
                infix[i] = ')';
            } else if (infix[i] == ')') {
                infix[i] = '(';
            }
        }
    }

public:
    void infixToPrefix(char infix[], char prefix[]) {
        char reversedInfix[100];
        char postfix[100];
        int i = 0;
        
        // Copy the infix array to reversedInfix
        while (infix[i] != '\0') {
            reversedInfix[i] = infix[i];
            i++;
        }
        reversedInfix[i] = '\0';  // Null-terminate the reversedInfix array
        int length = i;

        // Step 1: Reverse the infix expression
        reverse(reversedInfix, length);

        // Step 2: Swap parentheses
        swapParentheses(reversedInfix, length);

        // Step 3: Convert the modified infix expression to postfix
        int j = 0;
        for (i = 0; i < length; i++) {
            char symb = reversedInfix[i];
            switch (symb) {
                case '(':
                    push(symb);
                    break;
                case ')':
                    while (!isEmpty() && stack[top] != '(') {
                        postfix[j++] = pop();
                    }
                    if (!isEmpty()) {
                        pop(); // pop the '('
                    }
                    break;
                case '+': case '-': case '*': case '/': case '^':
                    while (!isEmpty() && precedence(stack[top]) >= precedence(symb)) {
                        postfix[j++] = pop();
                    }
                    push(symb);
                    break;
                default:
                    postfix[j++] = symb;
                    break;
            }
        }
        while (!isEmpty()) {
            postfix[j++] = pop();
        }
        postfix[j] = '\0';

        // Step 4: Reverse the postfix expression to get prefix
        reverse(postfix, j);
        for (i = 0; i < j; i++) {
            prefix[i] = postfix[i];
        }
        prefix[j] = '\0';

        cout << "Prefix expression is: " << prefix << endl;
    }
};

int main() {
    char infix[100], prefix[100];
    cout << "Enter the infix expression: ";
    cin >> infix;
    InfixToPrefix converter;
    converter.infixToPrefix(infix, prefix);
    return 0;
}
